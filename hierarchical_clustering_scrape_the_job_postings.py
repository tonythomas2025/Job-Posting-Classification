# -*- coding: utf-8 -*-
"""Hierarchical clustering_Scrape the job postings.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q9W0a3lQy3Dxj5Qjp26LIWMfkl2QHN04
"""

# Install missing packages if needed
!pip install joblib

import requests
from bs4 import BeautifulSoup
import pandas as pd
import time
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import AgglomerativeClustering
import os

def scrape_karkidi_jobs(keyword="data science", pages=2):
    headers = {'User-Agent': 'Mozilla/5.0'}
    base_url = "https://www.karkidi.com/Find-Jobs/{page}/all/India?search={query}"
    jobs_list = []

    for page in range(1, pages + 1):
        url = base_url.format(page=page, query=keyword.replace(' ', '%20'))
        print(f"Scraping page: {page}")
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.content, "html.parser")
        job_blocks = soup.find_all("div", class_="ads-details")

        for job in job_blocks:
            try:
                title = job.find("h4").get_text(strip=True)
                company = job.find("a", href=lambda x: x and "Employer-Profile" in x).get_text(strip=True)
                location = job.find("p").get_text(strip=True)
                experience = job.find("p", class_="emp-exp").get_text(strip=True)
                key_skills_tag = job.find("span", string="Key Skills")
                skills = key_skills_tag.find_next("p").get_text(strip=True) if key_skills_tag else ""
                summary_tag = job.find("span", string="Summary")
                summary = summary_tag.find_next("p").get_text(strip=True) if summary_tag else ""

                jobs_list.append({
                    "Title": title,
                    "Company": company,
                    "Location": location,
                    "Experience": experience,
                    "Summary": summary,
                    "Skills": skills
                })
            except Exception as e:
                print(f"Error parsing job block: {e}")
                continue
        time.sleep(1)
    return pd.DataFrame(jobs_list)

def preprocess_skills(df):
    df = df.copy()
    df['Skills'] = df['Skills'].str.lower().str.replace(r'[^a-zA-Z0-9, ]', '', regex=True)
    df['Skills'] = df['Skills'].str.split(',').apply(lambda x: [skill.strip() for skill in x])
    df['skills_str'] = df['Skills'].apply(lambda x: ' '.join(x))
    return df

def cluster_jobs(df, n_clusters=5):
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(df['skills_str'])

    model = AgglomerativeClustering(n_clusters=n_clusters)
    df['Cluster'] = model.fit_predict(X.toarray())

    return df, model, vectorizer

def save_all(df, model, vectorizer):
    os.makedirs('model', exist_ok=True)
    df.to_csv("clustered_jobs.csv", index=False)
    joblib.dump(model, "model/karkidi_model.pkl")
    joblib.dump(vectorizer, "model/karkidi_vectorizer.pkl")
    print("Saved model, vectorizer and clustered job data.")

# Run pipeline
df_jobs = scrape_karkidi_jobs(pages=2)
df_jobs = preprocess_skills(df_jobs)
df_jobs, model, vectorizer = cluster_jobs(df_jobs)
save_all(df_jobs, model, vectorizer)